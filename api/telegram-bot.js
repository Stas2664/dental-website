// Vercel API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ Telegram –≥—Ä—É–ø–ø—É
export default async function handler(req, res) {
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    try {
        const { name, age, phone: rawPhone, complaints } = req.body;
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        const phone = rawPhone.trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!name || !phone || !complaints) {
            return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
        }

        // –î–∞–Ω–Ω—ã–µ Telegram –≥—Ä—É–ø–ø—ã
        const BOT_TOKEN = '7535946322:AAGpiSvEsyBWama9QC-ydaRAF7Y94yutoc8';
        const CHAT_ID = '-4867519462'; // Chat ID –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã "–ó–∞—è–≤–∫–∏ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥"

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
        const message = `ü¶∑ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê –°–¢–û–ú–ê–¢–û–õ–û–ì–ê*

üë§ *–ü–∞—Ü–∏–µ–Ω—Ç:* ${name}
üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* ${age} –ª–µ—Ç
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
ü©∫ *–ñ–∞–ª–æ–±—ã:* ${complaints}

‚è∞ *–î–∞—Ç–∞/–≤—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        })}

üì± *–ò—Å—Ç–æ—á–Ω–∏–∫:* –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç
üîî *–°—Ç–∞—Ç—É—Å:* –¢—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: message,
                parse_mode: 'Markdown'
            })
        });

        const telegramData = await telegramResponse.json();

        if (telegramResponse.ok) {
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', telegramData);
            return res.status(200).json({ 
                success: true, 
                message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' 
            });
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', telegramData);
            return res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram', 
                details: telegramData 
            });
        }

    } catch (error) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        return res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
            details: error.message 
        });
    }
}
